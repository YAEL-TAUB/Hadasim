בס"ד
•	סיבוכיות זמן: הקוד קורא כל שורה בקובץ פעם אחת.
•	 עבור כל שורה, הוא מבצע פעולת התאמת ביטוי רגולרי ועדכון מפה.
•	 בהנחה שהביטוי הרגולרי והפעולות על המפה הן בסיבוכיות של O(1) בממוצע (או O(L) כאשר L הוא אורך שורת הלוג במקרה הגרוע), 
•	הסיבוכיות הכוללת לקריאה וספירה של כל השורות היא לינארית, 
•	כלומר O(M) כאשר M הוא מספר השורות הכולל בקובץ.
•	 שלב המיון הסופי (findTopNErrors) הוא O(KlogK) כאשר K הוא מספר קודי השגיאה הייחודיים שנמצאו.
•	 לרוב, K קטן בהרבה מ-M. 
•	לכן, סיבוכיות הזמן הדומיננטית היא O(M), 

סיבוכיות מקום: הקוד שומר בזיכרון רק את הצ'אנק הנוכחי של שורות (currentChunkLines), שגודלו מוגבל ל-CHUNK_SIZE_IN_LINES.
 בנוסף, הוא שומר את כל קודי השגיאה הייחודיים ואת ספירותיהם במפה allErrorCounts.
 אם יש K קודי שגיאה ייחודיים, המקום הנדרש עבור המפה יהיה O(K). 
לכן, סיבוכיות המקום הכוללת היא O(CHUNK_SIZE+K). 
מכיוון ש-CHUNK_SIZE הוא קבוע ו-K תלוי במספר קודי השגיאה הייחודיים (שבדרך כלל קטן משמעותית ממספר השורות הכולל.)




כשמחשבים ממוצעים משטף נתונים שמגיע בלי הפסקה, זה שונה מלעבוד עם קובץ שלם. אנחנו לא יכולים לחכות שכל הנתונים יגיעו.
במקום זה, עושים את זה כך:
1. קבלה ובדיקה: כל נתון שמגיע (זמן וערך) נבדק מיד אם הוא תקין.
2. שמירה לפי שעות: אנחנו מחזיקים בזיכרון "מחברת" שבה לכל שעה (לדוגמה, 14:00) יש סיכום של כל הערכים שהגיעו בה ומספר הפעמים שזה קרה. כשמגיע נתון חדש, אנחנו פשוט מעדכנים את הסכום והספירה של השעה שלו.
3. הצגת ממוצעים: מעת לעת (למשל, כל כמה דקות או בסוף כל שעה), אנחנו מחשבים את הממוצע לכל שעה (סכום חלקי ספירה) ומציגים אותו.
4. ניקוי: כדי שהזיכרון לא יתמלא, מוחקים נתונים של שעות ישנות שכבר לא צריכים אותן.
בקיצור, המערכת כל הזמן מעדכנת את הנתונים לפי שעות, מציגה ממוצעים כשצריך, ודואגת לא להתמלא.

